Iniciar repositório:
git flow init

main > develop

feature
release
hotflix: corrigir erro em produção (main), depois faz merge com a main e a develop

Iniciar uma feature:
git flow feature start <name>

Terminar feature:
gito flow feature finish <name>

Criar release
git flow release status <version>

------------------------------------------------------
Gerando chave GPG e assinando commits

Listar chaves ja existentes
gpg --list-secret-key --keyid-form LONG

Gerando chave
gpg --full-generate-key

escolhe qual o tipo de chave quer utilizar e o tamanho
1 RSA e 4096 bits

definir o tempo da chave: 1y ou 1m (0 nunca expira)

colocar o nome e o endereço de email que esta no git

retorno: rsa4096/DEF921C3C683EEB2

ID da chave gerado: DEF921C3C683EEB2

pegar chave: gpg --armor --export <ID>

------------------------------------------------------

Acecssa o git hub, vai em configurações > SSH and GPG keys > New GPG key

------------------------------------------------------
Dizer para o GIT qual é chave ele vai usar para assinar os próximos commits 

git config --global user.signingkey <id da chave>

------------------------------------------------------
Criar variável de ambiente do GPG
export GPG_TTY=$(tty)

Comando para criar a variável sempre que inicializar o bash do linux:
vim ~/.bash_profile

colar a variável de ambiente "export GPG_TTY=$(tty)"
sair e salvar "q!"
------------------------------------------------------
assinar por padrão os commits desse repositório atual
(adicionar --global caso queira assinar por padrão os commits de todos os repositórios)
git config --global commit.gpgsign true

assinar por padrao todas as tags:
git config --global tag.gpgsign true

------------------------------------------------------
Verificar se commit foi assinado:
git log --show-signature -1

------------------------------------------------------
Fazer push do código:
git branch -M main
Adicionar repositório remoto:
(OBS: Usar caminho https)
git remote add origin <URL>
Exemplo: git remote add origin https://github.com/henrique-brug/fullcycle-gitflow.git

git push -u origin main

------------------------------------------------------
Salvar login:

vim ~/.gnupg/gpp.conf

colocar: use-agent
:wq

gpgconf --launch gpg-agent

------------------------------------------------------
Adicionar mais um e-mail na chave:

gpg --edit-key <ID>
adduid

Deixar novo id confiável:
uid <indicador do uid (1, 2, 3...)>
trust
informar nível de confiança
save
------------------------------------------------------

BOAS PRÁTICAS:

Definir uma branch básica/padrão diferente da branch de produção, ou seja, definir como branch base a develop ao invés da main.
Para isso acessar o git hub, ir em repositório > projeto > settings > branches > default branch e trocar para a branch develop

PROTEÇÃO DA BRANCH:

Ainda em settings, acessar Branch protection rule:
informar a branch e explorar todas as regras necessárias disponíveis

------------------------------------------------------

PULL REQUEST

Processore pull request é baseado em criação de feature local (git checkout  -b feature/template-pronto) > feito push quando pronto > 
aprovado no repositório pelo responsável > realizado merge com branch padrão > deletado branch da feature no repositório remoto > 
realizado pull em repositório local > deletado a branch da feature no repositório local com (git branch -d feature/template)

TEMPLATE PARA AS FEATURE

criar pasta dentro do repositório ./github e criar um arquivo com a extensão ".md"
Layout exemplo:
 # Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* Firmware version:
* Hardware:
* Toolchain:
* SDK:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules
